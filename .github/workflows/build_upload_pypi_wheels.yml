name: Build and upload PyPI wheels and source dist

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-13, macos-latest, ubuntu-latest]
        python-version: ['3.10', '3.11', '3.12']
        include:
          - os: windows-latest
            wheelname: win
          - os: macos-13
            wheelname: macos-intel
          - os: macos-latest
            wheelname: macos-arm
          - os: ubuntu-latest
            wheelname: manylinux
          - python-version: '3.10'
            manylinux-version-tag: cp310
          - python-version: '3.11'
            manylinux-version-tag: cp311
          - python-version: '3.12'
            manylinux-version-tag: cp312
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure tags are fetched for versioning
      - name: Setup Python ${{ matrix.python-version }} with Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }}
          channels: conda-forge,defaults
          channel-priority: true
      - name: Install llvm on Macos
        if: startsWith(matrix.os, 'macos')
        shell: bash -l {0}
        env:
          # Homebrew location is different on Intel Mac
          LLVM_DIR: ${{ (matrix.os == 'macos-13') && '/usr/local/opt/llvm' || '/opt/homebrew/opt/llvm' }}
        run: |
          brew install llvm
          echo CC="${LLVM_DIR}/bin/clang" >> $GITHUB_ENV
          echo LDFLAGS="-L${LLVM_DIR}/lib $LDFLAGS" >> $GITHUB_ENV
          echo CPPFLAGS="-I${LLVM_DIR}/include $CPPFLAGS" >> $GITHUB_ENV
      - name: Setup MSVC env on Windows
        if: startsWith(matrix.os, 'windows')
        shell: bash -l {0}
        env:
          MSVC_BIN: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.41.34120\bin\HostX64\x64'
        run: |
          echo "CC=${MSVC_BIN}\cl.exe" >> $GITHUB_ENV
          echo "CC_LD=${MSVC_BIN}\link.exe" >> $GITHUB_ENV
      - name: Update Python pip, build, wheel, and twine
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip build wheel twine
      - name: Build Python wheel

        if: matrix.os != 'ubuntu-latest'
        shell: bash -l {0}
        env:
          NUMPY_VERSION: 2.0
        run: |
          # Build against lowest required Numpy version
          python -m pip install numpy==${NUMPY_VERSION}
          python -m build -o wheelhouse --wheel .

      - name: Build manylinux Python wheel
        if: matrix.os == 'ubuntu-latest'
        uses: pypa/cibuildwheel@v2.12.0
        env:
          CIBW_BUILD: ${{ matrix.manylinux-version-tag}}-manylinux*
          CIBW_BEFORE_BUILD: python -m pip install numpy==2.0
          CIBW_ARCHS: x86_64
        with:
          output-dir: wheelhouse

      - name: Create source distribution
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        shell: bash -l {0}
        run: |
          python -m build --sdist .

      - name: Upload source dist as build artifact
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' && github.event_name == 'release'
        uses: actions/upload-artifact@v4
        with:
            name: python-source-distribution
            path: dist

      - name: Upload wheels as build artifacts
        uses: actions/upload-artifact@v4
        with:
            name: wheel-${{ matrix.wheelname }}-${{ matrix.python-version }}
            path: wheelhouse/*-${{ matrix.wheelname }}*.whl

  publish:
    if: github.event_name == 'release'
    needs: build
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/euphonic
    permissions:
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This is possibly unnecessary?

      - name: Download artifacts to Ubuntu environment
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: List Files
        run: ls -R

      - name: Upload wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
