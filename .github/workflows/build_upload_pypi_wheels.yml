name: Build and upload PyPI wheels and source dist

on:
  release:
    types: [published]

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        architecture: [x64]
        python-version: [3.6, 3.7, 3.8, 3.9, 3.10]
        include:
          - os: windows-latest
            wheelname: win
          - os: macos-latest
            wheelname: macos
          - os: ubuntu-latest
            wheelname: manylinux
          # Build wheels against the lowest compatible Numpy version
          - python-version: 3.6
            manylinux-version-tag: cp36-cp36m
            numpy-version: 1.12.1
          - python-version: 3.7
            manylinux-version-tag: cp37-cp37m
            numpy-version: 1.14.6
          - python-version: 3.8
            manylinux-version-tag: cp38-cp38
            numpy-version: 1.17.3
          - python-version: 3.9
            manylinux-version-tag: cp39-cp39
            numpy-version: 1.19.3
          - python-version: 3.10
            manylinux-version-tag: cp310-cp310
            numpy-version: 1.21.3
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Ensure tags are fetched for versioning
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          architecture: ${{ matrix.architecture }}
          python-version: ${{ matrix.python-version }}
      - name: Update Python pip, wheel, and twine
        run: |
          python -m pip install --upgrade pip wheel twine
        shell: bash

      - name: Build Python wheel
        if: matrix.os != 'ubuntu-latest'
        env:
          NUMPY_VERSION: ${{ matrix.numpy-version }}
        run: |
          # Build against lowest required Numpy version
          python -m pip install numpy==${NUMPY_VERSION}
          python -m pip wheel . -w wheelhouse --no-deps
        shell: bash

      - name: Build manylinux Python wheel
        if: matrix.os == 'ubuntu-latest'
        uses: RalfG/python-wheels-manylinux-build@v0.3.4-manylinux2010_x86_64
        with:
          python-versions: ${{ matrix.manylinux-version-tag }}
          build-requirements: numpy==${{ matrix.numpy-version }}
          pip-wheel-args: '--no-deps -w wheelhouse'

      - name: Create source distribution
        if: matrix.os == 'windows-latest' && matrix.python-version == '3.10'
        run: |
          python setup.py sdist
        shell: bash

      - name: Upload as build artifacts
        uses: actions/upload-artifact@v2
        with:
            name: wheels
            path: wheelhouse/*-${{ matrix.wheelname }}*.whl
      - name: Upload source dist to PyPI
        if: matrix.os == 'windows-latest' && matrix.python-version == '3.10'
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload dist/*.tar.gz
        shell: bash
      - name: Upload wheel to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          WHEEL_NAME: ${{ matrix.wheelname }}
        run: |
          python -m twine upload wheelhouse/*-${WHEEL_NAME}*.whl
        shell: bash
