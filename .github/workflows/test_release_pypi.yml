name: Test PyPI release
on:
  workflow_call:
    inputs:
      version:
        description: 'The Euphonic release version to test e.g. 0.6.1'
        required: true
        type: string

  workflow_dispatch:
    inputs:
      version:
        description: 'The Euphonic release version to test e.g. 0.6.1'
        required: true

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensure tags are fetched for versioning
      - uses: actions/setup-python@v5
        with:
          python-version: |
              3.10
              3.11
              3.12
      - name: Install llvm on MacOS
        if: startsWith(matrix.os, 'macos')
        shell: bash -l {0}
        env:
          # Homebrew location is different on Intel Mac
          LLVM_DIR: ${{ (matrix.os == 'macos-13') && '/usr/local/opt/llvm' || '/opt/homebrew/opt/llvm' }}
        run: |
          brew install llvm
          echo CC="${LLVM_DIR}/bin/clang" >> $GITHUB_ENV
          echo LDFLAGS="-L${LLVM_DIR}/lib $LDFLAGS" >> $GITHUB_ENV
          echo CPPFLAGS="-I${LLVM_DIR}/include $CPPFLAGS" >> $GITHUB_ENV

      - name: Windows - find MSVC and set environment variables
        if: startsWith(matrix.os, 'windows')
        shell: bash -l {0}
        env:
          MSVC_PREFIX: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC'
        run: |
          echo "Available MSVC installations:"
          ls "$MSVC_PREFIX"

          MSVC_BIN=$(ls "$MSVC_PREFIX" | tail -n 1)\\bin\\HostX64\\x64
          CC="$MSVC_PREFIX\\$MSVC_BIN\\cl.exe"
          echo "CC: $CC"
          echo "CC=$CC" >> $GITHUB_ENV

          CC_LD="$MSVC_PREFIX\\$MSVC_BIN\\link.exe"
          echo "CC_LD: $CC_LD"
          echo "CC_LD=$CC_LD" >> $GITHUB_ENV

      - name: Update pip and install dependencies
        shell: bash -l {0}
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r tests_and_analysis/ci_requirements.txt

      - name: Run tests
        shell: bash -l {0}
        env:
          EUPHONIC_VERSION: ${{ github.event.inputs.version }}
        run: python -m tox -c build_utils/pypi_release_tox.ini
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Unit test results ${{ matrix.os }}
          path: tests_and_analysis/test/reports/junit_report*.xml

  publish-test-results:
    needs: test
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          junit_files: artifacts/**/junit_report*.xml
