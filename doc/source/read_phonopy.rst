.. _read_phonopy:

=====================
Reading Phonopy Output
=====================

Using Phonopy
-------

Phonopy documentation can be found here: `https://phonopy.github.io/phonopy/index.html`

Phonopy is an open source package for phonon calculations at harmonic and 
quasi-harmonic levels. It provides command line and programming interfaces 
to read the outputs from many atomistic modelling codes including: VASP, 
WEIN2K, Quantum Espresso, ABINIT, SIESTA, Elk, CRYSTAL, DFTB+, TURBOMOLE, 
CP2K, and FHI-AIMS.  

The phonopy workflow has three major steps: the pre-process where it generates 
unit cell data. The calculation step where an external modelling code calculates 
the force sets or force constants. Finally the post-process where interpolation 
is used to calculate frequencies, density of states, thermal properties, 
and band structure. 

Phonopy interpolation can be carried out in three ways; at selected qpoints
, a mesh of qpoints, or across linearly spaced bands of qpoints. These are 
reflected in the options to run in ``qpoints`` ``mesh``, and ``band`` modes
. After the post-process two files are output; a summary file describing 
session parameters and unit cell data, and a yaml/hdf5 data file containing 
at least the calculated frequencies and qpoints.

A phonopy session can be configured using a config file, or directly from 
the command line. For every command line parameter there is an equivalent 
entry in the config file. Important options are: 

    --band or BAND = .TRUE.
    --qpoints or QPOINTS = .TRUE.
    --mesh or MESH = .TRUE.
    --include-all or INCLUDE_ALL = .TRUE. (see ``include`` options for more information)
    --nac or NAC = .TRUE.           (use born in interpolation)
    --writefc or WRITEFC = .TRUE.   (other options interact with force constants file)
    --fc or FC = .TRUE.             (read force constants file)
    --hdf5 or HDF5 = .TRUE.         (read and write hdf5 instead of plaintext)
    --eigenvecs or EIGENVECS = .TRUE.   (read and write hdf5 instead of plaintext)

In order to get force constants, born effective charge, dielectric constant, 
    

InterpolationData
-----------------

The force constants matrix and other required information can be read 
from a number of different files generated by Phonopy:

- ``FORCE_CONSTANTS``
- ``force_constants.hdf5``
- ``phonopy.yaml``


Note that phonopy has no filename restrictions, but defaults to outputting 
a set same name for each output format, and there are currently no default 
Phonopy filename extensions. By default Euphonic will search the path for 
a set of default phonopy names, and kwargs can be used to specify any non
-default filenames.

.. code-block:: py

    from euphonic.data.interpolation import InterpolationData

    path = './quartz/'
    idata = InterpolationData.from_phonopy(path=path)

By default Phonopy will not output a force constants file, which can
be acquired in three ways: 

- For ``FORCE_CONSTANTS`` use ``--write-fc`` or set ``WRITE_FC = .TRUE.``
  in the session config file ``<filename>.conf``.

- For ``force_constants.hdf5`` use ``--hdf5`` or ``HDF5 = .TRUE.``
  in addition to the above.

- For ``phonopy.yaml`` use ``--include-fc`` or ``INCLUDE_FC = .TRUE.``

Note that Phonopy can generate a ``compact`` or ``full`` matrix. Only the 
``compact`` version is required so the full format is converted automatically 
on load.

There are other ways to generate force constants via extra Phonopy scripts 
or the phonopy api. Force constants can be extracted from Vasp calculator 
output using ``phonopy --fc vasprun.xml``, provided that the file contains 
``hessian`` elements after running vasp-dfpt. They can also be generated 
using the phonopy api to Quantum Espresso using the ``PH_Q2R`` class. 

Please consult Phonopy documentation for more information on generating force 
constants. `https://phonopy.github.io/phonopy/index.html`


PhononData
----------

Phonon information can be found in:


Frequencies and eigenvectors for PhononData are read from phonopy files
with the following default names: 

- ``mesh.yaml``/``mesh.hdf5`` (phonon file)
- ``qpoints.yaml``/``qpoints.hdf5`` (phonon file)
- ``bands.yaml``/``bands.hdf5`` (phonon file)
- ``phonopy.yaml`` (summary file)

Each of which corresponds to the run mode for that particular phonopy 
session (``mesh``, ``qpoints``, ``bands``). ``phonopy`` can output the 
session data in yaml and hdf5 formats, which can be achieved by running
``phonopy --hdf5 -c mesh.conf``

A path and phonon file name are generally sufficient to load all required
data, since ``phonopy.yaml`` is consistent for all phonopy uses. For
example, to load the output from a mesh session on NaCl data with the 
``--hdf5`` flag set:

.. code-block:: py

    from euphonic.data.phonon import PhononData

    path = './NaCl/'
    pdata = PhononData.from_phonopy(path, phonon_file='mesh.hdf5')

