[build-system]
build-backend = 'mesonpy'
requires = ["meson-python",
            "meson>=1.6",
            "ninja",
            "packaging",
            "numpy>=1.24.0"]

[tool.meson-python.args]
setup = ['--vsenv']

[project]
name = "Euphonic"
description = "Euphonic calculates phonon bandstructures and inelastic neutron scattering intensities from modelling code output (e.g. CASTEP)"
requires-python = ">=3.10"
readme = "README.rst"
license = {text = "GPLv3"}
keywords = [
    "Python",
    "physics",
    "phonons",
    "inelastic neutron scattering",
    "CASTEP",
    "Phonopy",
    "force constants"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: C",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "packaging",
    "numpy>=1.24.0",
    "scipy>=1.10",
    "seekpath>=1.1.0",
    "spglib>=1.9.4",
    "pint>=0.22",
    "threadpoolctl>=3.0.0",
    "toolz>=0.12.1",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://github.com/pace-neutrons/Euphonic"
Repository = "https://github.com/pace-neutrons/Euphonic.git"
"Bug Tracker" = "https://github.com/pace-neutrons/Euphonic/issues"
documentation = "https://euphonic.readthedocs.io/en/stable/"

[project.optional-dependencies]
matplotlib = ["matplotlib>=3.8.0"]
phonopy_reader = ["h5py>=3.6.0", "PyYAML>=6.0"]  # Deprecated, will be removed in future versions.
phonopy-reader = ["h5py>=3.6.0", "PyYAML>=6.0"]
brille = ["brille>=0.7.0"]
test = ["mock", "pytest~=7.0", "coverage", "pytest-mock", "pytest-lazy-fixture", "pytest-xvfb", "python-slugify"]
ci = ["tox==4.23.2"]

[project.scripts]
euphonic-brille-convergence = "euphonic.cli.brille_convergence:main"
euphonic-dispersion = "euphonic.cli.dispersion:main"
euphonic-dos = "euphonic.cli.dos:main"
euphonic-optimise-dipole-parameter = "euphonic.cli.optimise_dipole_parameter:main"
euphonic-show-sampling = "euphonic.cli.show_sampling:main"
euphonic-intensity-map = "euphonic.cli.intensity_map:main"
euphonic-powder-map = "euphonic.cli.powder_map:main"

[tool.ruff]
line-length = 79
target-version = "py310"
extend-exclude = ["doc/source/conf.py"]

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
select = [
       "ERA001",  # Eradicate commented-out code
       "YTT",     # Flake8-2020
       # "ANN",   # Full type annotation, not realistic right now
       "ASYNC",
       "S",       # Security (flake8-bandit)
       "BLE",     # flake8-blind-except
       # "FBT",   # flake8-boolean-trap: don't use positional boolean arguments. Fixable, but API-breaking.
       "B",     # flake8-bugbear: Fixable but a bit involved
       "A",       # flake8-builtins
       # "COM",   # flake8-commas: Fixable but a big diff
       # "C4",    # flake8-comprehensions: Good stuff, worth its own PR
       "T10",     # flake8-debugger
       # "EM",      # flake8-errmsg: Big diff, worth its own PR
       "EXE",     # flake8-executable
       "FIX",     # leftover FIXME, TODO etc. (flake8-fixme)
       "FA",      # flake8-future-annotations
       "INT",     # flake8-gettext
       "ISC",     # flake8-implicit-str-concat
       "ICN",     # flake8-import-conventions
       "LOG",     # flake8-logging
       "G",       # flake8-logging-format
       "INP",     # flake8-no-pep420
       # "PIE",     # flake8-pie
       # "PYI",     # flake8-pyi
       # "PT",      # flake8-pytest-style : good stuff, worth its own PR
       # "Q",       # flake8-quotes : 50-60 fixes if we prefer single. Fine, but do it in a new PR.
       "RSE",     # flake8-raise
       "RET",     # flake8-return
       # "SLF",     # flake8-self : would be good to take a closer look at some of this private attribute access
       # "SIM",   # flake8-simplify : good stuff, worth its own PR
       "SLOT",    # flake8-slots
       "TID",     # flake8-tidy-imports
       "TD",      # flake8-todos
       "TC",      # flake8-type-checking
       "ARG",     # flake8-unused-arguments
       # "PTH",     # flake8-use-pathlib : would love to but maybe easier with API breaks
       "FLY",     # flynt
       "I",       # isort
       # "C90",     # mccabe : code complexity check. Worth a look but non-trivial
       # "NPY",   # NumPy-specific rules : good stuff, worth its own PR
       "N",       # pep8-naming
       "PERF",    # Perflint
       "F401",    # unused-import
       # "E",     # pycodestyle error: this is a lot of stuff
       "W",       # pycodestyle warning
       "DOC",     # pydoclint
       # "D",     # 2000 errors, code sprint material?
       "F",
       "PGH",     # pygrep-hooks
       "PLC",     # pylint convention
       "PLE",     # pylint error
       # "PLR",   # pylint refactor; 71 errors, own PR needed
       "PLR0203", # no-staticmethod-decorator
       "PLR5501", # collapsible-else-if
       "PLW",     # pylint warning
       # "UP",    # pyupgrade; lots of type hints to update
       "FURB",    # refurb
       # "RUF",   # Very reasonable changes but a few of them
       # "TRY",   # tryceratops : quite a bit (maybe unnecessary) change in approach
]
ignore = [
       "S101",    # Use of except
       "CPY001",  # Missing copyright notice at top of every file. Not for us.
       "T20",     # flake8-print forbids use of print and pprint.
       "PERF203", # No try-except in loop. Micro-optimisation, not relevant for Py 3.11+
       "PLE1300", # Pint introduces format character P, ruff doesn't recognise it
       ]
task-tags = ["Note"]  # Avoid false positives for ERA001 on lines like "# Note: CODE-LIKE-THINGS"

[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `width: Quantity = Quantity(0.01, 'meV')`.
extend-immutable-calls = ["euphonic.Quantity", "euphonic.ureg.Quantity"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.isort]
force-sort-within-sections = true

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["k_B", "H_ab"]

[tool.ruff.lint.per-file-ignores]
"tests_and_analysis/test/**/*" = ["ARG"]  # pytest fixtures can look like unused arguments
