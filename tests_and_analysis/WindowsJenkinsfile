#!groovy

def getGitCommitAuthorEmail() {
    withCredentials([string(credentialsId: 'Euphonic_GitHub_API_Token',
            variable: 'api_token')]) {
        String GITHUB_API_BRANCH_URL = "https://api.github.com/repos/pace-neutrons/Euphonic/git/ref/heads/${env.JOB_BASE_NAME}"
        def branch_url_response = GITHUB_API_BRANCH_URL.toURL().getText(requestProperties: ['Authorization': "token ${api_token}"])
        def commit_url = new JsonSlurper().parseText(branch_url_response).object.url
        def commit_url_response = commit_url.toURL().getText(requestProperties: ['Authorization': "token ${api_token}"])
        return new JsonSlurper().parseText(commit_url_response).author.email
    }
}

pipeline {

    agent { label "PACE Windows (Private)" }

    triggers {
        GenericTrigger(
             genericVariables: [
                [key: 'ref', value: '$.ref']
             ],

             causeString: 'Triggered on $ref',

             token: 'Euphonic_GitHub_API_Token',

             printContributedVariables: true,
             printPostContent: true,

             silentResponse: false,

             regexpFilterText: '$ref',
             regexpFilterExpression: 'refs/head/' + env.JOB_BASE_NAME
        )
        pollSCM('')
    }

    stages {

        stage("Notify") {
            steps {
                checkout scm
                echo "Branch: ${env.JOB_BASE_NAME}"
            }
        }

        stage("Set up") {
            steps {
                bat """
                    CALL conda create --name py python=3.6.0 -y
                    CALL conda activate py
                    python -m pip install --upgrade --user pip
                    python -m pip install -r tests_and_analysis/jenkins_requirements.txt
                """
            }
        }

        stage("Test VS2019") {
            steps {
                bat """
                    CALL "%VS2019_VCVARSALL%" x86_amd64
                    CALL conda activate py
                    python -m tox
                """
            }
        }

        stage("PyPI Release Testing VS2019") {
            when { tag "*" }
            steps {
                bat """
                    CALL "%VS2019_VCVARSALL%" x86_amd64
                    rmdir /s /q .tox
                    CALL conda activate py
                    set /p EUPHONIC_VERSION= < python tests_and_analysis/tools/get_version.py
                    python -m tox -c release_tox.ini
                """
            }
        }
    }

    post {

        always {
            junit 'tests_and_analysis/test/reports/junit_report*.xml'
        }

        unsuccessful {
            script {
                def email = getGitCommitAuthorEmail()
                mail (
                    to: "$email",
                    subject: "Failed pipeline: ${env.JOB_BASE_NAME}",
                    body: "See ${env.BUILD_URL}"
                )
            }
        }

        cleanup {
            deleteDir()
        }

    }
}
