#!groovy

def getGitCommitAuthorEmail() {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        return powershell(
            script: """
                [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11, tls"
                \$branch_details = Invoke-RestMethod -URI "https://api.github.com/repos/pace-neutrons/Euphonic/git/ref/heads/${env.JOB_BASE_NAME}" \
                    -Headers @{Authorization = "token ${api_token}"} \
                    -Method 'GET' \
                    -ContentType "application/json"
                \$latest_commit_url = \$branch_details.object.url
                \$commit_details = Invoke-RestMethod -URI "\$latest_commit_url" \
                    -Headers @{Authorization = "token ${api_token}"} \
                    -Method 'GET' \
                    -ContentType "application/json"
                \$commit_author_email = \$commit_details.author.email
                echo "\$commit_author_email"
            """,
            returnStdout: true
        )
    }
}

def getCondaEnvName() {
  String envName = "euphonic_ci_branch_${env.BRANCH_NAME}"
  envName = envName.replaceAll("[ /:#]", "")
  return envName
}


pipeline {

    agent { label "PACE Windows (Private)" }

    environment {
      CONDA_ENV_NAME = getCondaEnvName()
    }

    triggers {
        GenericTrigger(
             genericVariables: [
                [key: 'ref', value: '$.ref']
             ],

             causeString: 'Triggered on $ref',

             token: 'GitHub_API_Token',

             printContributedVariables: true,
             printPostContent: true,

             silentResponse: false,

             regexpFilterText: '$ref',
             regexpFilterExpression: 'refs/head/' + env.JOB_BASE_NAME
        )
        pollSCM('')
    }

    stages {

        stage("Notify") {
            steps {
                checkout scm
                echo "Branch: ${env.JOB_BASE_NAME}"
            }
        }

        stage("Set up") {
            steps {
                bat """
                    CALL conda remove --name %CONDA_ENV_NAME% --all -y
                    CALL conda create --name %CONDA_ENV_NAME% python=3.6 -y
                    CALL conda activate %CONDA_ENV_NAME%
                    python -m pip install --upgrade --user pip
                    python -m pip install -r tests_and_analysis/jenkins_requirements.txt
                """
            }
        }

        stage("Test VS2019") {
          when { not { buildingTag() } }
            steps {
                bat """
                    CALL "%VS2019_VCVARSALL%" x86_amd64
                    CALL conda activate %CONDA_ENV_NAME%
                    python -m tox
                """
            }
        }

        stage("PyPI Release Testing VS2019") {
            when { buildingTag() }
            steps {
                script {
                    def tag = env.JOB_BASE_NAME.substring(1)
                    bat """
                        CALL "%VS2019_VCVARSALL%" x86_amd64
                        CALL conda activate %CONDA_ENV_NAME%
                        set EUPHONIC_VERSION=${tag}
                        python -m tox -c release_tox.ini
                    """
                }
            }
        }
    }

    post {

        always {
            junit 'tests_and_analysis/test/reports/junit_report*.xml'
            bat """
                CALL conda remove --name %CONDA_ENV_NAME% --all -y
            """
        }

        unsuccessful {
            script {
                def email = getGitCommitAuthorEmail()
                mail (
                    to: "$email",
                    subject: "Windows failed pipeline: ${env.JOB_BASE_NAME}",
                    body: "See ${env.BUILD_URL}"
                )
            }
        }

        cleanup {
            deleteDir()
        }

    }
}
