import os
import unittest
import numpy as np
import numpy.testing as npt
from euphonic import ureg, QpointPhononModes
from ..utils import get_data_path


class TestCalculateDosQuartz(unittest.TestCase):
    def setUp(self):
        filename = 'quartz-grid-666.phonon'
        path = get_data_path()
        self.data = QpointPhononModes.from_castep(os.path.join(path, filename))
        self.dos_bins = np.arange(0, 155, 0.75)*ureg('meV')
        self.gwidth = 1.0*ureg('meV')
        self.expected_dos_no_broaden = np.array([
            0.00000000, 0.00000000, 0.00000000, 0.00925926, 0.00925926,
            0.00925926, 0.02777778, 0.02777778, 0.06481481, 0.07407407,
            0.18518519, 0.37962963, 0.41666667, 0.11111111, 0.12037037,
            0.14814815, 0.18518519, 0.25000000, 0.23148148, 0.30555556,
            0.11111111, 0.17592593, 0.29629630, 0.24074074, 0.12037037,
            0.15740741, 0.13888889, 0.21296296, 0.20370370, 0.11111111,
            0.09259259, 0.23148148, 0.19444444, 0.17592593, 0.12037037,
            0.16666667, 0.28703704, 0.19444444, 0.19444444, 0.20370370,
            0.16666667, 0.14814815, 0.21296296, 0.22222222, 0.17592593,
            0.18518519, 0.21296296, 0.26851852, 0.40740741, 0.16666667,
            0.19444444, 0.27777778, 0.12037037, 0.10185185, 0.11111111,
            0.20370370, 0.14814815, 0.12037037, 0.09259259, 0.19444444,
            0.15740741, 0.19444444, 0.13888889, 0.36111111, 0.31481481,
            0.34259259, 0.36111111, 0.37962963, 0.43518519, 0.25925926,
            0.37037037, 0.26851852, 0.28703704, 0.22222222, 0.31481482,
            0.34259259, 0.12962963, 0.15740741, 0.04629630, 0.00000000,
            0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.07407407,
            0.13888889, 0.08333333, 0.18518519, 0.14814815, 0.22222222,
            0.07407407, 0.05555556, 0.01851852, 0.00000000, 0.00000000,
            0.00000000, 0.03703704, 0.04629630, 0.04629630, 0.07407407,
            0.12962963, 0.14814815, 0.24074074, 0.05555556, 0.03703704,
            0.03703704, 0.05555556, 0.00925926, 0.04629630, 0.01851852,
            0.01851852, 0.03703704, 0.00000000, 0.00000000, 0.03703704,
            0.00000000, 0.00925926, 0.10185185, 0.26851852, 0.13888889,
            0.09259259, 0.04629630, 0.07407407, 0.06481481, 0.05555556,
            0.03703704, 0.00000000, 0.01851852, 0.12037037, 0.20370370,
            0.18518519, 0.37962963, 0.36111111, 0.42592593, 0.34259259,
            0.41666667, 0.12037037, 0.26851852, 0.10185185, 0.09259259,
            0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
            0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
            0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
            0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
            0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
            0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
            0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000,
            0.00000000, 0.76851852, 0.62037037, 1.07407407, 0.53703704,
            0.00000000, 0.00000000, 0.00000000, 0.00925926, 0.02777778,
            0.01851852, 0.05555556, 0.05555556, 0.09259259, 0.15740741,
            0.26851852, 0.27777778, 0.29629630, 0.37962963, 0.21296296,
            0.16666667, 0.22222222, 0.18518519, 0.13888889, 0.13888889,
            0.10185185, 0.10185185, 0.03703704, 0.05555556, 0.00000000,
            0.00000000])
        self.expected_dos_gauss = np.array([
            1.89821400e-04, 4.62490725e-01, 5.02221288e+01, 2.86920571e+02,
            3.37604811e+02, 4.37587147e+02, 9.12832853e+02, 1.21185526e+03,
            2.21488334e+03, 3.25744507e+03, 7.19622598e+03, 1.29482468e+04,
            1.33039341e+04, 5.75279448e+03, 4.50040712e+03, 5.44728005e+03,
            6.89120163e+03, 8.65268885e+03, 8.91783008e+03, 9.67341834e+03,
            5.45423912e+03, 6.71397021e+03, 9.82508869e+03, 8.40998126e+03,
            5.23847534e+03, 5.43979990e+03, 5.55704418e+03, 7.29857310e+03,
            6.96051017e+03, 4.45488243e+03, 4.22797412e+03, 7.47433828e+03,
            7.17072197e+03, 6.20897758e+03, 4.94222978e+03, 6.46848918e+03,
            9.29399180e+03, 7.57665838e+03, 7.13298292e+03, 7.16509862e+03,
            6.17178112e+03, 5.84858757e+03, 7.45155404e+03, 7.78730889e+03,
            6.70796162e+03, 6.84838069e+03, 7.91141060e+03, 1.02157145e+04,
            1.27737684e+04, 7.52222415e+03, 7.38548065e+03, 8.80618689e+03,
            5.13248347e+03, 3.87171629e+03, 4.49585968e+03, 6.61172680e+03,
            5.53893300e+03, 4.39070983e+03, 4.07407239e+03, 6.32989363e+03,
            6.12533923e+03, 6.59071411e+03, 6.55963755e+03, 1.16962707e+04,
            1.18544426e+04, 1.24272777e+04, 1.31499352e+04, 1.40140130e+04,
            1.45947582e+04, 1.09890086e+04, 1.23402936e+04, 1.04212331e+04,
            1.00091233e+04, 8.94565204e+03, 1.11038843e+04, 1.11652521e+04,
            6.01882760e+03, 4.98641175e+03, 2.03588339e+03, 2.56659962e+02,
            2.31473144e+00, 2.46768508e-03, 3.70125452e+00, 4.05013325e+02,
            2.64414357e+03, 4.40563382e+03, 3.88296966e+03, 5.99598495e+03,
            5.98445615e+03, 6.88700669e+03, 3.39469884e+03, 1.92888301e+03,
            7.75656915e+02, 1.02295359e+02, 2.77589343e+00, 2.01351385e+02,
            1.19790346e+03, 1.63502811e+03, 1.83869005e+03, 2.84873162e+03,
            4.52233758e+03, 5.78402842e+03, 7.25718532e+03, 2.92222732e+03,
            1.45918548e+03, 1.44763061e+03, 1.67314879e+03, 7.86829024e+02,
            1.33646915e+03, 8.24026231e+02, 7.74265646e+02, 1.04723783e+03,
            2.01812736e+02, 2.00888324e+02, 9.47257393e+02, 2.53889004e+02,
            7.99312856e+02, 4.10340498e+03, 8.16308063e+03, 5.49849532e+03,
            3.37928192e+03, 2.08934105e+03, 2.49810057e+03, 2.35768397e+03,
            1.97124412e+03, 1.24951477e+03, 3.07347049e+02, 1.13229617e+03,
            4.28056067e+03, 6.86931175e+03, 7.89286718e+03, 1.26718851e+04,
            1.35866768e+04, 1.47096074e+04, 1.33100083e+04, 1.31740767e+04,
            6.78148907e+03, 8.08390866e+03, 4.55032300e+03, 2.92774583e+03,
            5.02687193e+02, 4.62509701e+00, 1.89817954e-03, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            2.85886040e-07, 1.57551210e-02, 3.83836930e+01, 4.16104612e+03,
            2.30334728e+04, 2.57877515e+04, 3.37153008e+04, 1.95315955e+04,
            2.93969881e+03, 2.72983415e+01, 5.11579299e+01, 3.86902717e+02,
            8.62148044e+02, 9.24470870e+02, 1.82427880e+03, 2.22513237e+03,
            3.52763889e+03, 5.98114297e+03, 9.22237232e+03, 1.01630995e+04,
            1.11313185e+04, 1.24636011e+04, 8.40577239e+03, 6.62747736e+03,
            7.58919778e+03, 6.68984949e+03, 5.30824428e+03, 4.85855815e+03,
            3.90621791e+03, 3.35978441e+03, 1.79779425e+03, 1.62431432e+03,
            3.00409120e+02, 2.77456469e+00])

    def test_dos_no_broaden(self):
        dos = self.data.calculate_dos(self.dos_bins)
        npt.assert_allclose(dos.y_data.magnitude,
                            self.expected_dos_no_broaden)

    def test_dos_gauss(self):
        dos = self.data.calculate_dos(self.dos_bins)
        dos = dos.broaden(self.gwidth, shape='gauss')
        vals = dos.y_data.magnitude
        nonzero = np.where(np.logical_and(
            vals != 0, self.expected_dos_gauss != 0))[0]
        rel = np.mean(self.expected_dos_gauss[nonzero]/vals[nonzero])
        npt.assert_allclose(rel*vals, self.expected_dos_gauss, atol=5e-2)