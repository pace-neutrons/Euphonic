import pytest
import numpy as np
import numpy.testing as npt
from euphonic import ureg, ForceConstants
import os
from tests_and_analysis.test.utils import get_data_path
import itertools


@pytest.mark.integration
class TestCalculateQPointPhononModes:

    path = os.path.join(get_data_path(), 'interpolation')

    expected_freqs = {
        "LZO": {
            "asr": np.array([
                [0.0002964449, 0.0002964449, 0.0003208033,
                 0.0003501419, 0.0003501419, 0.0003903141,
                 0.0004972138, 0.0004972138, 0.0005372809,
                 0.0005438643, 0.0005861166, 0.0005861166,
                 0.0007103804, 0.0007103804, 0.0007331639,
                 0.0007786131, 0.0007874376, 0.0007929211,
                 0.0008126016, 0.0008354861, 0.0008354861,
                 0.0009078731, 0.0009078731, 0.0010160378,
                 0.0010264374, 0.0010554444, 0.0011528145,
                 0.0012094888, 0.0012304278, 0.0012410548,
                 0.0012410548, 0.0012564500, 0.0013664070,
                 0.0013664070, 0.0014355566, 0.0014355566,
                 0.0014576129, 0.0015442745, 0.0015442745,
                 0.0015449039, 0.0015505652, 0.0015937746,
                 0.0017167608, 0.0017828465, 0.0017828465,
                 0.0018048096, 0.0018598080, 0.0018598080,
                 0.0018726170, 0.0019193824, 0.0020786777,
                 0.0020786777, 0.0022934801, 0.0024275754,
                 0.0024275754, 0.0024850292, 0.0025000804,
                 0.0025179345, 0.0025179345, 0.0025401087,
                 0.0025550191, 0.0025550191, 0.0028191070,
                 0.0033473173, 0.0033680501, 0.0033680501],
                [-1.2527213902e-09, -1.2524650945e-09, -1.2522509615e-09,
                 2.5186476888e-04, 2.5186476888e-04, 2.5186476888e-04,
                 4.2115533128e-04, 4.2115533128e-04, 4.5919137201e-04,
                 4.5919137201e-04, 4.5919137201e-04, 6.0460911494e-04,
                 6.0460911494e-04, 6.0460911494e-04, 6.1121916807e-04,
                 6.1121916807e-04, 6.1121916807e-04, 6.8315329115e-04,
                 6.8315329115e-04, 8.9085325717e-04, 8.9085325717e-04,
                 8.9085325717e-04, 1.0237996415e-03, 1.0237996415e-03,
                 1.0237996415e-03, 1.1666034640e-03, 1.1744920636e-03,
                 1.1744920636e-03, 1.1744920636e-03, 1.2802064794e-03,
                 1.2802064794e-03, 1.2802064794e-03, 1.3122749877e-03,
                 1.4159439055e-03, 1.4159439055e-03, 1.4159439055e-03,
                 1.4813308344e-03, 1.4813308344e-03, 1.5084818310e-03,
                 1.5084818310e-03, 1.5084818310e-03, 1.5957863393e-03,
                 1.7192994802e-03, 1.7192994802e-03, 1.8119521571e-03,
                 1.8119521571e-03, 1.8119521571e-03, 1.8609709896e-03,
                 1.8609709896e-03, 1.8609709896e-03, 2.1913629570e-03,
                 2.2033452584e-03, 2.2033452584e-03, 2.2033452584e-03,
                 2.4420900293e-03, 2.4420900293e-03, 2.4420900293e-03,
                 2.4754830417e-03, 2.4754830417e-03, 2.4754830417e-03,
                 2.5106852083e-03, 2.5106852083e-03, 2.5106852083e-03,
                 3.3517193438e-03, 3.3517193438e-03, 3.3517193438e-03]
            ]) * ureg('hartree'),
            "no_asr": np.array([
                [0.0002964623, 0.0002964623, 0.0003208033, 0.000350174,
                 0.000350174, 0.0003903141, 0.0004972179, 0.0004972179,
                 0.0005372886, 0.0005438642, 0.0005861163, 0.0005861163,
                 0.0007103807, 0.0007103807, 0.0007331935, 0.0007786131,
                 0.0007874315, 0.0007929211, 0.0008126019, 0.0008354958,
                 0.0008354958, 0.000907874, 0.000907874, 0.0010160402,
                 0.0010264376, 0.0010554468, 0.0011528125, 0.0012094888,
                 0.0012304238, 0.0012410492, 0.0012410492, 0.00125645,
                 0.0013664066, 0.0013664066, 0.0014355603, 0.0014355603,
                 0.0014576129, 0.0015442837, 0.0015442837, 0.0015449061,
                 0.0015505634, 0.0015937746, 0.0017167601, 0.0017828448,
                 0.0017828448, 0.001804811, 0.0018598084, 0.0018598084,
                 0.0018726182, 0.0019193824, 0.0020786769, 0.0020786769,
                 0.002293487, 0.0024275755, 0.0024275755, 0.0024850292,
                 0.0025000804, 0.002517934, 0.002517934, 0.0025401063,
                 0.0025550198, 0.0025550198, 0.0028191102, 0.0033473155,
                 0.0033680501, 0.0033680501],
                [1.2522582708e-05, 1.2522582708e-05, 1.2522582708e-05,
                 2.5186476888e-04, 2.5186476888e-04, 2.5186476888e-04,
                 4.2115533128e-04, 4.2115533128e-04, 4.5920462007e-04,
                 4.5920462007e-04, 4.5920462007e-04, 6.0462274991e-04,
                 6.0462274991e-04, 6.0462274991e-04, 6.1121916807e-04,
                 6.1121916807e-04, 6.1121916807e-04, 6.8315329115e-04,
                 6.8315329115e-04, 8.9089400855e-04, 8.9089400855e-04,
                 8.9089400855e-04, 1.0238000223e-03, 1.0238000223e-03,
                 1.0238000223e-03, 1.1666034640e-03, 1.1744920636e-03,
                 1.1744920636e-03, 1.1744920636e-03, 1.2802064794e-03,
                 1.2802064794e-03, 1.2802064794e-03, 1.3122749877e-03,
                 1.4159439055e-03, 1.4159439055e-03, 1.4159439055e-03,
                 1.4813308344e-03, 1.4813308344e-03, 1.5085078032e-03,
                 1.5085078032e-03, 1.5085078032e-03, 1.5957863393e-03,
                 1.7192994802e-03, 1.7192994802e-03, 1.8119544413e-03,
                 1.8119544413e-03, 1.8119544413e-03, 1.8609709896e-03,
                 1.8609709896e-03, 1.8609709896e-03, 2.1913629570e-03,
                 2.2033465408e-03, 2.2033465408e-03, 2.2033465408e-03,
                 2.4420900293e-03, 2.4420900293e-03, 2.4420900293e-03,
                 2.4754830417e-03, 2.4754830417e-03, 2.4754830417e-03,
                 2.5106852083e-03, 2.5106852083e-03, 2.5106852083e-03,
                 3.3517193438e-03, 3.3517193438e-03, 3.3517193438e-03]
            ]) * ureg('hartree')
        },
        "graphite": {
            "asr": np.array([
                [-1.4954416353e-09, -1.4920078435e-09, -1.4801148666e-09,
                 1.8361944616e-04, 1.8361944616e-04, 4.3310694904e-04,
                 4.0094292783e-03, 4.0298656188e-03, 7.0857269505e-03,
                 7.0857269505e-03, 7.1044827434e-03, 7.1044827434e-03],
                [5.1653999633e-06, 3.2069627188e-05, 5.1670788680e-05,
                 1.8632833975e-04, 1.9060943285e-04, 4.3314392040e-04,
                 4.0093920383e-03, 4.0298240624e-03, 7.0856315683e-03,
                 7.0859645028e-03, 7.1043776174e-03, 7.1046906727e-03],
                [2.1681099868e-03, 2.2111725605e-03, 2.8193685159e-03,
                 2.8197548439e-03, 2.9049709255e-03, 2.9141514127e-03,
                 6.0277000188e-03, 6.0316368591e-03, 6.0977873315e-03,
                 6.1104625371e-03, 6.3230408313e-03, 6.3262959952e-03],
                [7.6871083387e-04, 8.8171407452e-04, 2.1005257455e-03,
                 2.1043480758e-03, 3.5723508265e-03, 3.5925792804e-03,
                 3.7679565502e-03, 3.7804526590e-03, 6.6594311463e-03,
                 6.6651464071e-03, 7.2007012704e-03, 7.2132353835e-03],
                [1.4065426444e-04, 1.4065426444e-04, 1.4065426444e-04,
                 1.4065426444e-04, 3.2305904460e-04, 3.2305904460e-04,
                 4.0222682768e-03, 4.0222682768e-03, 7.1591503492e-03,
                 7.1591503492e-03, 7.1591503492e-03, 7.1591503492e-03]
            ]) * ureg('hartree'),
            "no_asr": np.array([
                [-1.4947813885e-05, -1.4947813885e-05, 1.7871973126e-05,
                 1.8361944616e-04, 1.8361944616e-04, 4.3310694904e-04,
                 4.0094292783e-03, 4.0298656188e-03, 7.0857269505e-03,
                 7.0857269505e-03, 7.1044827434e-03, 7.1044827434e-03],
                [1.8594596548e-05, 2.8377223801e-05, 4.9463914519e-05,
                 1.8632830014e-04, 1.9060940094e-04, 4.3314392073e-04,
                 4.0093920384e-03, 4.0298240625e-03, 7.0856315682e-03,
                 7.0859645027e-03, 7.1043776174e-03, 7.1046906727e-03],
                [2.1681107372e-03, 2.2111728203e-03, 2.8193681109e-03,
                 2.8197547098e-03, 2.9049711018e-03, 2.9141516000e-03,
                 6.0276999661e-03, 6.0316367945e-03, 6.0977872708e-03,
                 6.1104623404e-03, 6.3230407709e-03, 6.3262959354e-03],
                [7.6869781440e-04, 8.8171407111e-04, 2.1005260482e-03,
                 2.1043510112e-03, 3.5723508344e-03, 3.5925812023e-03,
                 3.7679565852e-03, 3.7804526859e-03, 6.6594311404e-03,
                 6.6651464171e-03, 7.2007012512e-03, 7.2132353897e-03],
                [1.4065426444e-04, 1.4065426444e-04, 1.4065426444e-04,
                 1.4065426444e-04, 3.2305904460e-04, 3.2305904460e-04,
                 4.0222682768e-03, 4.0222682768e-03, 7.1591503492e-03,
                 7.1591503492e-03, 7.1591503492e-03, 7.1591503492e-03]
            ]) * ureg('hartree')
        }
    }

    materials = [
        (
            "LZO", 'La2Zr2O7.castep_bin',
            np.array([  # Qpoints
                [-1.00, 9.35, 3.35],
                [-1.00, 9.00, 3.00]
            ])
        ),
        (
            "graphite", "graphite.castep_bin",
            np.array([  # Qpoints
                [0.00, 0.00, 0.00],
                [0.001949, 0.001949, 0.00],
                [0.50, 0.00, 0.00],
                [0.25, 0.00, 0.00],
                [0.00, 0.00, 0.50]
            ])
        )
    ]

    kwargs = [
        {"use_c": False, "fall_back_on_python": True, "n_threads": 1},
        {"use_c": True, "fall_back_on_python": False, "n_threads": 1},
        {"use_c": True, "fall_back_on_python": False, "n_threads": 2},
        {
            "use_c": False, "fall_back_on_python": True,
            "n_threads": 1, "asr": "realspace"
        },
        {
            "use_c": True, "fall_back_on_python": False,
            "n_threads": 1, "asr": "realspace"
        },
        {
            "use_c": True, "fall_back_on_python": False,
            "n_threads": 2, "asr": "realspace"
        }
    ]

    @pytest.fixture(
        params=list(itertools.product(materials, kwargs))
    )
    def calculate_qpoint_phonon_modes(self, request):
        material, kwargs = request.param
        material_name, castep_bin_file, qpts = material
        filename = os.path.join(self.path, material_name, castep_bin_file)
        return ForceConstants.from_castep(filename), qpts, material_name, kwargs

    def test_calculate_qpoint_phonon_modes(self, calculate_qpoint_phonon_modes):
        fc, qpts, material_name, kwargs = calculate_qpoint_phonon_modes
        print(material_name)
        qpoint_phonon_modes = fc.calculate_qpoint_phonon_modes(
            qpts, **kwargs
        )
        if "asr" in kwargs:
            test_expected_freqs = self.expected_freqs[material_name]["asr"]
        else:
            test_expected_freqs = self.expected_freqs[material_name]["no_asr"]
        npt.assert_allclose(
            qpoint_phonon_modes.frequencies.to('hartree').magnitude,
            test_expected_freqs.to('hartree').magnitude,
            atol=1e-10
        )

    @pytest.mark.parametrize(
        ("material_name", "castep_bin_file", "fc_mat_asr_file"),
        [
            ('graphite', 'graphite.castep_bin', 'graphite_fc_mat_asr.npy'),
            ('LZO', 'La2Zr2O7.castep_bin', 'lzo_fc_mat_asr.npy')
        ]
    )
    def test_enforce_realspace_acoustic_sum_rule(
            self, material_name, castep_bin_file, fc_mat_asr_file):
        castep_bin_filepath = os.path.join(
            self.path, material_name, castep_bin_file
        )
        fc = ForceConstants.from_castep(castep_bin_filepath)
        expected_fc_mat = np.load(
            os.path.join(self.path, material_name, fc_mat_asr_file)
        )
        fc_mat = fc._enforce_realspace_asr()
        npt.assert_allclose(fc_mat, expected_fc_mat, atol=1e-18)

    quart_expected_freqs = {
        "asr_splitting": np.array([
            [0.00000000, 0.00000000, 0.00000134, 0.00058293, 0.00058293,
             0.00101620, 0.00117558, 0.00117559, 0.00155134, 0.00168918,
             0.00172394, 0.00172394, 0.00200565, 0.00200565, 0.00209131,
             0.00245470, 0.00316467, 0.00316467, 0.00360268, 0.00363298,
             0.00363298, 0.00487608, 0.00487608, 0.00495076, 0.00525430,
             0.00525431, 0.00565964],
            [0.00021598, 0.00056611, 0.00056686, 0.00075777, 0.00083532,
             0.00083554, 0.00092328, 0.00119699, 0.00119903, 0.00175523,
             0.00182882, 0.00191025, 0.00191045, 0.00205709, 0.00205738,
             0.00259496, 0.00259505, 0.00355706, 0.00358489, 0.00362570,
             0.00362572, 0.00484913, 0.00492809, 0.00492815, 0.00505041,
             0.00553678, 0.00553679],
            [0.00000000, 0.00000000, 0.00000134, 0.00058293, 0.00058293,
             0.00101620, 0.00117558, 0.00117559, 0.00155134, 0.00168918,
             0.00172394, 0.00172394, 0.00200565, 0.00200565, 0.00209131,
             0.00245470, 0.00316467, 0.00316467, 0.00360268, 0.00363298,
             0.00363298, 0.00487608, 0.00487608, 0.00495076, 0.00525430,
             0.00525431, 0.00565964],
            [0.00000000, 0.00000000, 0.00000093, 0.00058293, 0.00058305,
             0.00101620, 0.00117558, 0.00117967, 0.00155134, 0.00161358,
             0.00172394, 0.00176372, 0.00200565, 0.00209027, 0.00209131,
             0.00238641, 0.00316467, 0.00317281, 0.00354729, 0.00363298,
             0.00367378, 0.00487608, 0.00490124, 0.00495076, 0.00524661,
             0.00525431, 0.00563557],
            [0.00029928, 0.00044784, 0.00045479, 0.00083284, 0.00085117,
             0.00107950, 0.00122947, 0.00131602, 0.00142866, 0.00154594,
             0.00166280, 0.00179836, 0.00189458, 0.00191540, 0.00205403,
             0.00246941, 0.00278199, 0.00315087, 0.00370009, 0.00376137,
             0.00380880, 0.00488793, 0.00490540, 0.00490617, 0.00526645,
             0.00531057, 0.00540940],
            [0.00000000, 0.00000000, 0.00000093, 0.00058293, 0.00058305,
             0.0010162, 0.00117558, 0.00117967, 0.00155134, 0.00161358,
             0.00172394, 0.00176372, 0.00200565, 0.00209027, 0.00209131,
             0.00238641, 0.00316467, 0.00317281, 0.00354729, 0.00363298,
             0.00367378, 0.00487608, 0.00490124, 0.00495076, 0.00524661,
             0.00525431, 0.00563557],
            [0.00000000, 0.00000000, 0.00000000, 0.00058293, 0.00058293,
             0.0010162, 0.00117558, 0.00117559, 0.00155134, 0.00157718,
             0.00172394, 0.00172394, 0.00200565, 0.00200565, 0.00209131,
             0.00222481, 0.00316467, 0.00316467, 0.00352002, 0.00363298,
             0.00363298, 0.00487608, 0.00487608, 0.00492353, 0.00495076,
             0.0052543, 0.00525431],
            [0.00000000, 0.00000000, 0.00000000, 0.00058293, 0.00058293,
             0.0010162, 0.00117558, 0.00117559, 0.00155134, 0.00157718,
             0.00172394, 0.00172394, 0.00200565, 0.00200565, 0.00209131,
             0.00222481, 0.00316467, 0.00316467, 0.00352002, 0.00363298,
             0.00363298, 0.00487608, 0.00487608, 0.00492353, 0.00495076,
             0.0052543, 0.00525431],
            [0.00000000, 0.00000000, 0.00000000, 0.00058293, 0.00058293,
             0.0010162, 0.00117558, 0.00117559, 0.00155134, 0.00157718,
             0.00172394, 0.00172394, 0.00200565, 0.00200565, 0.00209131,
             0.00222481, 0.00316467, 0.00316467, 0.00352002, 0.00363298,
             0.00363298, 0.00487608, 0.00487608, 0.00492353, 0.00495076,
             0.0052543, 0.00525431],
            [0.00000000, 0.00000000, 0.00000000, 0.00058293, 0.00058293,
             0.0010162, 0.00117558, 0.00117559, 0.00155134, 0.00157718,
             0.00172394, 0.00172394, 0.00200565, 0.00200565, 0.00209131,
             0.00222481, 0.00316467, 0.00316467, 0.00352002, 0.00363298,
             0.00363298, 0.00487608, 0.00487608, 0.00492353, 0.00495076,
             0.0052543, 0.00525431],
            [0.00000000, 0.00000000, 0.00000102, 0.00058293, 0.00058303,
             0.0010162, 0.00117558, 0.00117884, 0.00155134, 0.00162384,
             0.00172394, 0.00176016, 0.00200565, 0.00207171, 0.00209131,
             0.00240211, 0.00316467, 0.0031712, 0.0035549, 0.00363298,
             0.00366903, 0.00487608, 0.00489617, 0.00495076, 0.00524826,
             0.00525431, 0.00564028],
            [0.00028671, 0.00036112, 0.00049916, 0.00082386, 0.00084410,
             0.00109225, 0.00130495, 0.00134356, 0.00142776, 0.00155337,
             0.00159266, 0.00179031, 0.00188151, 0.00193612, 0.00205664,
             0.00243853, 0.00280084, 0.00315578, 0.00370595, 0.00370979,
             0.00385195, 0.00489429, 0.00489894, 0.00490641, 0.00527571,
             0.00533034, 0.00537398],
            [0.00000000, 0.00000000, 0.00000102, 0.00058293, 0.00058303,
             0.0010162, 0.00117558, 0.00117884, 0.00155134, 0.00162384,
             0.00172394, 0.00176016, 0.00200565, 0.00207171, 0.00209131,
             0.00240211, 0.00316467, 0.0031712, 0.0035549, 0.00363298,
             0.00366903, 0.00487608, 0.00489617, 0.00495076, 0.00524826,
             0.00525431, 0.00564028]
        ]) * ureg('hartree'),
        "asr": np.array([
            [0.00000000, 0.00000000, 0.00000000, 0.00058293, 0.00058293,
             0.00101620, 0.00117558, 0.00117559, 0.00155134, 0.00157718,
             0.00172394, 0.00172394, 0.00200565, 0.00200565, 0.00209131,
             0.00222481, 0.00316467, 0.00316467, 0.00352002, 0.00363298,
             0.00363298, 0.00487608, 0.00487608, 0.00492353, 0.00495076,
             0.00525430, 0.00525431],
            [0.00021598, 0.00056611, 0.00056686, 0.00075777, 0.00083532,
             0.00083554, 0.00092328, 0.00119699, 0.00119903, 0.00175523,
             0.00182882, 0.00191025, 0.00191045, 0.00205709, 0.00205738,
             0.00259496, 0.00259505, 0.00355706, 0.00358489, 0.00362570,
             0.00362572, 0.00484913, 0.00492809, 0.00492815, 0.00505041,
             0.00553678, 0.00553679],
            [0.00029928, 0.00044784, 0.00045479, 0.00083284, 0.00085117,
             0.00107950, 0.00122947, 0.00131602, 0.00142866, 0.00154594,
             0.00166280, 0.00179836, 0.00189458, 0.00191540, 0.00205403,
             0.00246941, 0.00278199, 0.00315087, 0.00370009, 0.00376137,
             0.00380880, 0.00488793, 0.00490540, 0.00490617, 0.00526645,
             0.00531057, 0.00540940],
            [0.00028671, 0.00036112, 0.00049916, 0.00082386, 0.00084410,
             0.00109225, 0.00130495, 0.00134356, 0.00142776, 0.00155337,
             0.00159266, 0.00179031, 0.00188151, 0.00193612, 0.00205664,
             0.00243853, 0.00280084, 0.00315578, 0.00370595, 0.00370979,
             0.00385195, 0.00489429, 0.00489894, 0.00490641, 0.00527571,
             0.00533034, 0.00537398]
        ]) * ureg('hartree'),
        "no_asr": np.array([
            [-0.00009745, -0.00005474, -0.00005474, 0.00058293, 0.00058293,
             0.00101620, 0.00117558, 0.00117559, 0.00155134, 0.00157713,
             0.00172393, 0.00172393, 0.00200563, 0.00200563, 0.00209131,
             0.00222477, 0.00316467, 0.00316467, 0.00352001, 0.00363297,
             0.00363297, 0.00487607, 0.00487607, 0.00492351, 0.00495076,
             0.00525430, 0.00525431],
            [0.00021293, 0.00056589, 0.00056590, 0.00075771, 0.00083485,
             0.00083485, 0.00092258, 0.00119698, 0.00119698, 0.00175516,
             0.00182881, 0.00191025, 0.00191027, 0.00205705, 0.00205705,
             0.00259491, 0.00259491, 0.00355700, 0.00358489, 0.00362570,
             0.00362570, 0.00484908, 0.00492808, 0.00492808, 0.00505040,
             0.00553676, 0.00553677],
            [0.00029664, 0.00044691, 0.00045286, 0.00083218, 0.00085090,
             0.00107911, 0.00122936, 0.00131583, 0.00142863, 0.00154578,
             0.00166267, 0.00179816, 0.00189441, 0.00191534, 0.00205378,
             0.00246936, 0.00278196, 0.00315079, 0.00370003, 0.00376130,
             0.00380875, 0.00488787, 0.00490533, 0.00490608, 0.00526644,
             0.00531051, 0.00540936],
            [0.00028396, 0.00036024, 0.00049599, 0.00082340, 0.00084375,
             0.00109203, 0.00130479, 0.00134347, 0.00142754, 0.00155335,
             0.00159243, 0.00179022, 0.00188140, 0.00193608, 0.00205639,
             0.00243849, 0.00280079, 0.00315569, 0.00370591, 0.00370973,
             0.00385188, 0.00489424, 0.00489891, 0.00490631, 0.00527567,
             0.00533033, 0.00537392]
        ]) * ureg('hartree')
    }

    qpts = np.array([
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.50],
        [-0.25, 0.50, 0.50],
        [-0.151515, 0.575758, 0.5]
    ])
    split_qpts = np.array([
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.50],
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00],
        [-0.25, 0.50, 0.50],
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00],
        [-0.151515, 0.575758, 0.5],
        [0.00, 0.00, 0.00]
    ])
    split_qpts_insert_gamma = np.array([
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.50],
        [0.00, 0.00, 0.00],
        [-0.25, 0.50, 0.50],
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00],
        [0.00, 0.00, 0.00],
        [-0.151515, 0.575758, 0.5],
        [0.00, 0.00, 0.00]
    ])

    quartz_test_data = [
        (
            {"qpts": qpts, "dipole": True, "splitting": False},
            2e-6
        ),
        (
            {
                "qpts": qpts, "dipole": True, "splitting": False,
                "use_c": True, "fall_back_on_python": False
            },
            2e-6
        ),
        (
            {
                "qpts": qpts, "dipole": True, "splitting": False, "use_c": True,
                "n_threads": 2, "fall_back_on_python": False
            },
            8e-8
        ),
        (
            {
                "qpts": qpts, "asr": 'reciprocal',
                "dipole": True, "splitting": False
            },
            5e-4
        ),
        (
            {
                "qpts": qpts, "asr": 'reciprocal', "dipole": True,
                "splitting": False, "use_c": True, "fall_back_on_python": False
            },
            5e-4
        ),
        (
            {
                "qpts": qpts, "asr": 'reciprocal', "dipole": True,
                "splitting": False, "use_c": True, "n_threads": 2,
                "fall_back_on_python": False
            },
            5e-4
        ),
        (
            {
                "qpts": split_qpts, "asr": 'reciprocal',
                "dipole": True, "splitting": True
            },
            5e-4
        ),
        (
            {
                "qpts": split_qpts, "asr": 'reciprocal', "dipole": True,
                "splitting": True, "use_c": True, "fall_back_on_python": False
            },
            5e-4
        ),
        (
            {
                "qpts": split_qpts, "asr": 'reciprocal', "dipole": True,
                "splitting": True, "use_c": True, "n_threads": 2,
                "fall_back_on_python": False
            },
            5e-4
        ),
        (
            {
                "qpts": split_qpts_insert_gamma, "asr": 'reciprocal',
                "dipole": True, "splitting": True, "insert_gamma": True
            },
            5e-4
        )
    ]

    quartz_castep_bin_file = os.path.join(path, "quartz", "quartz.castep_bin")

    @pytest.mark.parametrize(("kwargs", "atol"), quartz_test_data)
    def test_quartz_calculate_qpoint_phonon_modes(self, kwargs, atol):
        fc = ForceConstants.from_castep(self.quartz_castep_bin_file)
        qpoint_phonon_modes = fc.calculate_qpoint_phonon_modes(**kwargs)
        if "asr" in kwargs:
            if "splitting" in kwargs and kwargs["splitting"]:
                test_expected_freqs = self.quart_expected_freqs["asr_splitting"]
            else:
                test_expected_freqs = self.quart_expected_freqs["asr"]
        else:
            test_expected_freqs = self.quart_expected_freqs["no_asr"]
        npt.assert_allclose(
            qpoint_phonon_modes.frequencies.to('hartree').magnitude,
            test_expected_freqs.to('hartree').magnitude,
            atol=atol
        )
